from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from datetime import datetime
from config import TOKEN
from parsing_koll import days_dict

class Bot():
    def start():
        test()

def test():
    print('Bot start no –ø—Ä–æ–≤–µ—Ä–∫–∏')
    bot = Bot(token=TOKEN)
    dp = Dispatcher(bot)

    dict_test = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' : '–ø–Ω',
        '–≤—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç',
        '—Å—Ä–µ–¥–∞': '—Å—Ä',
        '—á–µ—Ç–≤–µ—Ä–≥': '—á—Ç',
        '–ø—è—Ç–Ω–∏—Ü–∞': '–ø—Ç',
        '—Å—É–±–±–æ—Ç–∞': '—Å–±',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' : '–≤—Å',

        '–ø–Ω': '–ø–Ω',
        '–≤—Ç': '–≤—Ç',
        '—Å—Ä': '—Å—Ä',
        '—á—Ç': '—á—Ç',
        '–ø—Ç': '–ø—Ç',
        '—Å–±': '—Å–±',
        '–≤—Å': '–≤—Å',

        1 : '–ø–Ω',
        2 : '–≤—Ç',
        3 : "—Å—Ä",
        4 : "—á—Ç",
        5 : "–ø—Ç",
        6 : "—Å–±",
        7 : "–≤—Å",
    }

    week_list = ['–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]

    #command 'start'
    @dp.message_handler(commands=['start'])
    async def welcome_user(msg: types.Message):


        #button "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        kb = [
            [types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
                [
                    types.KeyboardButton(text='–ü–Ω'),
                    types.KeyboardButton(text='–í—Ç'),
                    types.KeyboardButton(text='–°—Ä'),
                ],
                [
                    types.KeyboardButton(text='–ß—Ç'),
                    types.KeyboardButton(text='–ü—Ç'),
                    types.KeyboardButton(text='–°–±'),
                ]
            ]

        markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

        await msg.answer(f"""
        –ü—Ä–∏–≤–µ—Ç <b>{msg.from_user.last_name}</b>!
    –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä –≤ –∫–æ–ª–ª–µ–¥–∂–µ –ü–ì–£–¢–ò –ö–°.\n–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ 
        """, parse_mode="HTML", reply_markup=markup)


    #all message
    @dp.message_handler()
    async def lalala(msg: types.Message):

        if msg.text.lower() == "–ø–∞—à–µ–ª –Ω–∞—Ö—É–π":
            await msg.answer('–°–∞–º –ø–∞—à—ë–ª –Ω–∞—Ö—É–π')

        elif msg.text.lower() == '—Å–µ–≥–æ–¥–Ω—è':
            today = dict_test[datetime.isoweekday(datetime.now())]
            if days_dict[today] == '–í—ã—Ö–æ–¥–Ω–æ–π':
                await msg.answer('–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –∏–¥–∏ —Å–ø–∏')
            else:
                for items in days_dict[today]:
                    await msg.answer(f'–ü–∞—Ä–∞: {items[0]}\n–í—Ä–µ–º—è: {items[1]}\n–ö–∞–±–∏–Ω–µ—Ç:{items[4]}\n–ü—Ä–µ–ø–æ–¥: {items[3]}\n–ü—Ä–µ–¥–º–µ—Ç: <b>{items[2]}</b>', parse_mode='HTML')


        elif msg.text.lower() == '–∑–∞–≤—Ç—Ä–∞':
            today = dict_test[datetime.isoweekday(datetime.now())+1]
            if days_dict[today] == '–í—ã—Ö–æ–¥–Ω–æ–π':
                await msg.answer('–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å')
            else:
                for items in days_dict[today]:
                    await msg.answer(f'–ü–∞—Ä–∞: {items[0]}\n–í—Ä–µ–º—è: {items[1]}\n–ö–∞–±–∏–Ω–µ—Ç:{items[4]}\n–ü—Ä–µ–ø–æ–¥: {items[3]}\n–ü—Ä–µ–¥–º–µ—Ç: <b>{items[2]}</b>', parse_mode='HTML')


        elif msg.text.lower() in week_list:
            for items in days_dict[dict_test[msg.text.lower()]]:
                await msg.answer(f'–ü–∞—Ä–∞: {items[0]}\n–í—Ä–µ–º—è: {items[1]}\n–ö–∞–±–∏–Ω–µ—Ç:{items[4]}\n–ü—Ä–µ–ø–æ–¥: {items[3]}\n–ü—Ä–µ–¥–º–µ—Ç: <b>{items[2]}</b>', parse_mode='HTML')    


        else:
            await msg.answer('–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –Ω–∞ —Ç–∞–∫–æ–µ –æ—Ç–≤–µ—Ç–∏—Ç—åüòï')



    # if __name__ == '__main__':
    print('Bot starting')
    executor.start_polling(dp)






# –ö–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—é —á—Ç–æ –±—ã –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Å–ø–æ–Ω–∏–ª –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–Ω –¥–ª—è —É—á–µ–±—ã –∫–æ—Ä–æ—á–µ

# –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏(Inline)

    # inline_kb = types.InlineKeyboardMarkup()
    # kb_inline_btn1 = types.InlineKeyboardButton('–ü–Ω', callback_data='button_–ø–Ω')
    # kb_inline_btn2 = types.InlineKeyboardButton('–í—Ç', callback_data='button_–≤—Ç')
    # kb_inline_btn3 = types.InlineKeyboardButton('–°—Ä', callback_data='button_—Å—Ä')
    # kb_inline_btn4 = types.InlineKeyboardButton('–ß—Ç', callback_data='button_—á—Ç')
    # kb_inline_btn5 = types.InlineKeyboardButton('–ü—Ç', callback_data='button_–ø—Ç')
    # kb_inline_btn6 = types.InlineKeyboardButton('–°–±', callback_data='button_—Å–±')
    # inline_kb.add(kb_inline_btn1, kb_inline_btn2, kb_inline_btn3, kb_inline_btn4, kb_inline_btn5, kb_inline_btn6)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º inline –∫–Ω–æ–ø–∫–∏

# @dp.callback_query_handler(Text(startswith='button'))
# async def pn_week(collback: types.CallbackQuery):
#     res = collback.data.split('_')[1]
#     await collback.message.answer(f'    {week_time[days_dict[res][0][-1]]}    ')
#     for items in days_dict[res]:
#         await collback.message.answer(f'–ü–∞—Ä–∞: {items[0]}\n–í—Ä–µ–º—è: {items[1]}\n–ö–∞–±–∏–Ω–µ—Ç:{items[4]}\n–ü—Ä–µ–ø–æ–¥: {items[3]}\n–ü—Ä–µ–¥–º–µ—Ç: <b>{items[2]}</b>', parse_mode='HTML')
#     await collback.answer()
